#!/usr/bin/env sh

ROOTFS=bind

#############
# Arguments #
#############

usage()
{
  echo "Usage: sudo $0"
  echo "  [-w <timeout-in-seconds>]"
  echo "  [-m <memlimit-in-bytes>]"
  echo "  [-t <cpu-time-limit-in-seconds>]"
  echo "  [-s] (use squashfs for the rootfs)"
  echo "  <executable-on-rootfs>"
}

while getopts "m:t:w:sh" arg
do
  case $arg in
  m)  LIMIT_MEMORY="$OPTARG";;
  t)  LIMIT_CPU_TIME="-t $OPTARG";;
  w)  LIMIT_WALL_CLOCK="timeout ${OPTARG}s";;
      # OBS! timeout(1) skews CPU time measurements.
  s)  ROOTFS=squashfs;;
  h)  usage
      exit 0
      ;;
  ?)  usage
      exit 1
      ;;
  esac
done

shift $((OPTIND -1))

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

#########
# Setup #
#########

if [ $(id -u) != 0 ]; then
  echo "$0 must be run as root."
  exit 1
fi

./setup-cgroups.sh || exit 1

# Some useful variables.
CGROUPS_DIR="cgroups-target"
MEMCG="$CGROUPS_DIR/memory/onlineta"
CPUACCT="$CGROUPS_DIR/cpu,cpuacct/onlineta"

# Apply the memory limit, if specified.
if [ -n "$LIMIT_MEMORY" ]; then
  /bin/echo "$LIMIT_MEMORY" > "$MEMCG/memory.limit_in_bytes"
fi

# A file to save time data into.
TIME_FILE=$(mktemp "tmp.onlineta.XXXXXXXXXXXX")

#######
# Run #
#######

$LIMIT_WALL_CLOCK \
  /usr/bin/time -p --output="$TIME_FILE" \
  ./mnt \
  ./sh-rootfs-$ROOTFS \
  ./sh-iofs \
  ./pumin \
  ./cgroups \
    -g ./cgroups-target/memory/onlineta/tasks \
    -g ./cgroups-target/cpu,cpuacct/onlineta/tasks \
    -g ./cgroups-target/devices/onlineta/tasks \
  ./pivot-root \
  /.bin/umount-oldroot \
  /.bin/setuid \
  /.bin/rlimits $LIMIT_CPU_TIME \
  $@

##########
# Report #
##########

TIME__WALL_CLOCK=$(cat "$TIME_FILE" | head -n 1 | cut -d ' ' -f 2)
if [ -z "$TIME__WALL_CLOCK" ]; then
  TIME__WALL_CLOCK="timeout"
fi
echo "Wall-clock time (seconds): $TIME__WALL_CLOCK"

MEMCG__MAX_USAGE_IN_BYTES=$(cat "$MEMCG/memory.max_usage_in_bytes")
echo "Max memory use (bytes): $MEMCG__MAX_USAGE_IN_BYTES"

CPUACCT__USAGE=$(cat "$CPUACCT/cpuacct.usage")
echo "Total CPU time (nanoseconds): $CPUACCT__USAGE"

CPUACCT__STAT=$(cat "$CPUACCT/cpuacct.stat")

CPUACCT__STAT_USER=$(echo "$CPUACCT__STAT" | head -n 1 | cut -d ' ' -f 2)
echo "Total CPU time in user mode (USER_HZ): $CPUACCT__STAT_USER"

CPUACCT__STAT_KERNEL=$(echo "$CPUACCT__STAT" | tail -n 1 | cut -d ' ' -f 2)
echo "Total CPU time in kernel mode (USER_HZ): $CPUACCT__STAT_KERNEL"

############
# Teardown #
############

rm "$TIME_FILE"

./teardown-cgroups.sh || exit 1
